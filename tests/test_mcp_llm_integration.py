import json
import logging
from pathlib import Path

import wx

from app.log import logger
from app.mcp.client import MCPClient
from app.mcp.server import JsonlHandler, start_server, stop_server
from tests.llm_utils import cfg_with_mcp
from tests.mcp_utils import _wait_until_ready


def test_create_and_delete_requirement_via_llm(tmp_path: Path, monkeypatch) -> None:
    port = 8142
    stop_server()
    start_server(port=port, base_path=str(tmp_path))
    try:
        _wait_until_ready(port)
        cfg = cfg_with_mcp("127.0.0.1", port, str(tmp_path), "", app_name="CookaReq-LLM-Int")
        client = MCPClient(cfg)
        log_file = tmp_path / "integration.jsonl"
        handler = JsonlHandler(str(log_file))
        logger.addHandler(handler)
        prev_level = logger.level
        logger.setLevel(logging.INFO)
        try:
            text_create = (
                "Create a requirement with id 10, title 'LLM test', statement 'Generated by LLM', "
                "type requirement, status draft, owner alice, priority low, source spec, "
                "verification analysis and labels ['llm','automation']."
            )
            create_result = client.run_command(text_create)
            path = tmp_path / "10.json"
            data = json.loads(path.read_text())
            assert data["title"] == "LLM test"
            assert data["owner"] == "alice"
            rev = data["revision"]
            monkeypatch.setattr(wx, "MessageBox", lambda *a, **k: wx.YES)
            text_delete = f"Delete requirement 10 with revision {rev}. I confirm the deletion."
            delete_result = client.run_command(text_delete)
            assert delete_result["id"] == 10
        finally:
            logger.setLevel(prev_level)
            logger.removeHandler(handler)
        entries = [json.loads(line) for line in log_file.read_text().splitlines()]
        events = {e.get("event") for e in entries}
        assert path.exists() is False
        assert {"LLM_REQUEST", "LLM_RESPONSE", "TOOL_CALL", "TOOL_RESULT", "DONE"} <= events
    finally:
        stop_server()
