"""Tests for mcp llm integration."""

import json
import logging
from pathlib import Path

from app.log import logger
from app.agent import LocalAgent
from app.mcp.server import JsonlHandler, app as mcp_app
from tests.llm_utils import make_openai_mock, settings_with_mcp
import pytest

pytestmark = pytest.mark.integration


def test_create_and_delete_requirement_via_llm(tmp_path: Path, monkeypatch, mcp_server) -> None:
    port = mcp_server
    mcp_app.state.base_path = str(tmp_path)
    settings = settings_with_mcp(
        "127.0.0.1", port, str(tmp_path), "", tmp_path=tmp_path
    )
    responses = {}
    monkeypatch.setattr("openai.OpenAI", make_openai_mock(responses))
    client = LocalAgent(settings=settings, confirm=lambda _m: True)
    log_file = tmp_path / "integration.jsonl"
    handler = JsonlHandler(str(log_file))
    logger.addHandler(handler)
    prev_level = logger.level
    logger.setLevel(logging.INFO)
    try:
        text_create = (
            "Create a requirement with id 10, title 'LLM test', statement 'Generated by LLM', "
            "type requirement, status draft, owner alice, priority low, source spec, "
            "verification analysis and labels ['llm','automation']."
        )
        responses[text_create] = (
            "create_requirement",
            {
                "data": {
                    "id": 10,
                    "title": "LLM test",
                    "statement": "Generated by LLM",
                    "type": "requirement",
                    "status": "draft",
                    "owner": "alice",
                    "priority": "low",
                    "source": "spec",
                    "verification": "analysis",
                    "labels": ["llm", "automation"],
                }
            },
        )
        create_result = client.run_command(text_create)
        path = tmp_path / "10.json"
        data = json.loads(path.read_text())
        assert data["title"] == "LLM test"
        assert data["owner"] == "alice"
        rev = data["revision"]
        text_delete = f"Delete requirement 10 with revision {rev}. I confirm the deletion."
        responses[text_delete] = (
            "delete_requirement",
            {"req_id": 10, "rev": rev},
        )
        delete_result = client.run_command(text_delete)
        assert delete_result["id"] == 10
    finally:
        logger.setLevel(prev_level)
        logger.removeHandler(handler)
    entries = [json.loads(line) for line in log_file.read_text().splitlines()]
    events = {e.get("event") for e in entries}
    assert path.exists() is False
    assert {"LLM_REQUEST", "LLM_RESPONSE", "TOOL_CALL", "TOOL_RESULT", "DONE"} <= events
